# generate normally distributed data with mean 0 and standard deviation
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast Errors, with the normally distributed ˓→data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(Errors, col="red", freq=FALSE, breaks=mybins, main = '')
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast Errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
png(filename = 'HistErrors.png', width=30, height=15, units = 'cm', res = 600)
p8 <- plotErrors(df_timeseriesforecasts$residuals)
dev.off()
# Since successive forecast Errors do not seem to be correlated, and the forecast
# Since successive forecast Errors do not seem to be correlated, and the forecast
# Errors seem to be normally distributed with mean zero and constant variance,
print('-----------------------------------------------------------------------')
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA")
library(TTR)
library(forecast)
library(readr)
library(ggplot2)
library(tibble)
library(hrbrthemes)
library(tseries)
df <- read_csv("Daily_Country_Wise_Confirmed_Cases.csv")
# Remember the names
Countries <- df$Country
# Transpose all but the first column (Country)
df <- as.data.frame(t(df[ , -1]))
colnames(df) <- Countries
df <- tibble::rownames_to_column(df, "Date")
# Adds up a World Count in the dataframe
Sum <- rowSums(df[ , -1])
Sum <- matrix(Sum)
df[ ,114] <- Sum
Countries[113] <- 'World'
Countries2 <- 'Date'
Countries2 <- append(Countries2, Countries)
colnames(df) <- Countries2
# World: Monkeypox Cases
df_timeseries <- ts(df$World, frequency=7)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA/World")
png(filename = 'Decompose.png', width = 20, height = 10, units = 'cm', res=600)
df_timeseries_components <- decompose(df_timeseries)
p0 <- plot(df_timeseries_components)
dev.off()
png(filename = 'Cases&Differences.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p1 <- plot.ts(df_timeseries, xlab = 'Number of days', ylab = 'Number of Cases', main = 'A')
# ARIMA models are defined for stationary time series. Therefore, if you start off
# with a non-stationary time series, you will first need to ‘difference’ the time
# series until you obtain a stationary time series.
# If you have to difference the time series d times to obtain a stationary series,
# then you have an ARIMA(p,d,q) model, where d is the order of differencing used.
df_timeseriesdiff1 <- diff(df_timeseries, differences=1)
p2 <- plot.ts(df_timeseriesdiff1, xlab = 'Number of days', ylab = 'Differences of number of cases', main = 'B')
dev.off()
png(filename = 'ACF&PACF.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p3 <- acf(df_timeseriesdiff1, lag.max=20, main = 'A')
acf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
p4 <- pacf(df_timeseriesdiff1, lag.max=20, main = 'B')
pacf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
dev.off()
auto.arima(df$`World`)
df_timeseriesarima <- arima(df_timeseries, order=c(2,1,1))
print(df_timeseriesarima)
df_timeseriesforecasts <- forecast(df_timeseriesarima, h=15)
print(df_timeseriesforecasts)
print('-----------------------------------------------------------------------')
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA")
library(TTR)
print('-----------------------------------------------------------------------')
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA")
library(TTR)
library(forecast)
library(readr)
library(ggplot2)
library(tibble)
library(hrbrthemes)
library(tseries)
df <- read_csv("Daily_Country_Wise_Confirmed_Cases.csv")
# Remember the names
Countries <- df$Country
# Transpose all but the first column (Country)
df <- as.data.frame(t(df[ , -1]))
colnames(df) <- Countries
df <- tibble::rownames_to_column(df, "Date")
# USA: Monkeypox Cases
df_timeseries <- ts(df$`United States`, frequency = 7)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA/USA")
png(filename = 'Decompose.png', width = 20, height = 10, units = 'cm', res=600)
df_timeseries_components <- decompose(df_timeseries)
p0 <- plot(df_timeseries_components)
dev.off()
png(filename = 'Cases&Differences.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p1 <- plot.ts(df_timeseries, xlab = 'Number of days', ylab = 'Number of Cases', main = 'A')
# ARIMA models are defined for stationary time series. Therefore, if you start off
# with a non-stationary time series, you will first need to ‘difference’ the time
# series until you obtain a stationary time series.
# If you have to difference the time series d times to obtain a stationary series,
# then you have an ARIMA(p,d,q) model, where d is the order of differencing used.
df_timeseriesdiff1 <- diff(df_timeseries, differences=1)
p2 <- plot.ts(df_timeseriesdiff1, xlab = 'Number of days', ylab = 'Differences of number of cases', main = 'B')
dev.off()
png(filename = 'ACF&PACF.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p3 <- acf(df_timeseriesdiff1, lag.max=20, main = 'A')
acf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
p4 <- pacf(df_timeseriesdiff1, lag.max=20, main = 'B')
pacf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
dev.off()
auto.arima(df$`United States`)
df_timeseriesarima <- arima(df_timeseries, order=c(0,1,1))
print(df_timeseriesarima)
df_timeseriesforecasts <- forecast(df_timeseriesarima, h=15)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA")
library(TTR)
library(forecast)
library(readr)
library(ggplot2)
library(tibble)
library(tseries)
df <- read_csv("Daily_Country_Wise_Confirmed_Cases.csv")
# Remember the names
Countries <- df$Country
# Transpose all but the first column (Country)
df <- as.data.frame(t(df[ , -1]))
colnames(df) <- Countries
df <- tibble::rownames_to_column(df, "Date")
# Mexico: Monkeypox Cases
df_timeseries <- ts(df$Mexico, frequency = 7)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA/MEX")
png(filename = 'Decompose.png', width = 18, height = 20, units = 'cm', res=600)
df_timeseries_components <- decompose(df_timeseries)
par(mfrow = c(4,1), mar = c(4, 4, 1, 1))
plot(df_timeseries_components$x, ylab = 'Data',
xlab = '')
plot(df_timeseries_components$trend, ylab = 'Trend',
xlab = '')
plot(df_timeseries_components$seasonal, ylab = 'Seasonal',
xlab = '')
plot(df_timeseries_components$random, xlab = 'Number of weeks',
ylab = 'Random')
dev.off()
p1 <- plot.ts(df_timeseries, xlab = 'Number of days', ylab = 'Number of Cases', main = 'A')
png(filename = 'Differences.png', width=35, height=15, units = 'cm', res = 600)
df_timeseriesdiff1 <- diff(df_timeseries, differences=1)
p2 <- plot.ts(df_timeseriesdiff1, xlab = 'Number of days', ylab = 'Differences between pairs of consecutive cases', main = 'B')
dev.off()
png(filename = 'ACF&PACF.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p3 <- acf(df_timeseriesdiff1, lag.max=20, main = 'A')
acf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
p4 <- pacf(df_timeseriesdiff1, lag.max=20, main = 'B')
pacf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
dev.off()
auto.arima(df$Mexico)
df_timeseriesarima <- arima(df_timeseries, order=c(4,1,3))
print(df_timeseriesarima)
df_timeseriesforecasts <- forecast(df_timeseriesarima, h=15)
print(df_timeseriesforecasts)
print('-----------------------------------------------------------------------')
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA")
library(TTR)
library(forecast)
library(readr)
library(ggplot2)
library(tibble)
library(hrbrthemes)
library(tseries)
df <- read_csv("Daily_Country_Wise_Confirmed_Cases.csv")
# Remember the names
Countries <- df$Country
# Transpose all but the first column (Country)
df <- as.data.frame(t(df[ , -1]))
colnames(df) <- Countries
df <- tibble::rownames_to_column(df, "Date")
# Adds up a World Count in the dataframe
Sum <- rowSums(df[ , -1])
Sum <- matrix(Sum)
df[ ,114] <- Sum
Countries[113] <- 'World'
Countries2 <- 'Date'
Countries2 <- append(Countries2, Countries)
colnames(df) <- Countries2
# World: Monkeypox Cases
df_timeseries <- ts(df$World, frequency=7)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA/World")
png(filename = 'Decompose.png', width = 20, height = 10, units = 'cm', res=600)
df_timeseries_components <- decompose(df_timeseries)
p0 <- plot(df_timeseries_components)
dev.off()
png(filename = 'Cases&Differences.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p1 <- plot.ts(df_timeseries, xlab = 'Number of days', ylab = 'Number of Cases', main = 'A')
# ARIMA models are defined for stationary time series. Therefore, if you start off
# with a non-stationary time series, you will first need to ‘difference’ the time
# series until you obtain a stationary time series.
# If you have to difference the time series d times to obtain a stationary series,
# then you have an ARIMA(p,d,q) model, where d is the order of differencing used.
df_timeseriesdiff1 <- diff(df_timeseries, differences=1)
p2 <- plot.ts(df_timeseriesdiff1, xlab = 'Number of days', ylab = 'Differences of number of cases', main = 'B')
dev.off()
png(filename = 'ACF&PACF.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p3 <- acf(df_timeseriesdiff1, lag.max=20, main = 'A')
acf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
p4 <- pacf(df_timeseriesdiff1, lag.max=20, main = 'B')
pacf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
dev.off()
auto.arima(df$`World`)
df_timeseriesarima <- arima(df_timeseries, order=c(2,1,1))
print(df_timeseriesarima)
df_timeseriesforecasts <- forecast(df_timeseriesarima, h=15)
print(df_timeseriesforecasts)
print('-----------------------------------------------------------------------')
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA")
library(TTR)
library(forecast)
library(readr)
library(ggplot2)
library(tibble)
library(hrbrthemes)
library(tseries)
df <- read_csv("Daily_Country_Wise_Confirmed_Cases.csv")
# Remember the names
Countries <- df$Country
# Transpose all but the first column (Country)
df <- as.data.frame(t(df[ , -1]))
colnames(df) <- Countries
df <- tibble::rownames_to_column(df, "Date")
# USA: Monkeypox Cases
df_timeseries <- ts(df$`United States`, frequency = 7)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA/USA")
png(filename = 'Decompose.png', width = 20, height = 10, units = 'cm', res=600)
df_timeseries_components <- decompose(df_timeseries)
p0 <- plot(df_timeseries_components)
dev.off()
png(filename = 'Cases&Differences.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p1 <- plot.ts(df_timeseries, xlab = 'Number of days', ylab = 'Number of Cases', main = 'A')
# ARIMA models are defined for stationary time series. Therefore, if you start off
# with a non-stationary time series, you will first need to ‘difference’ the time
# series until you obtain a stationary time series.
# If you have to difference the time series d times to obtain a stationary series,
# then you have an ARIMA(p,d,q) model, where d is the order of differencing used.
df_timeseriesdiff1 <- diff(df_timeseries, differences=1)
p2 <- plot.ts(df_timeseriesdiff1, xlab = 'Number of days', ylab = 'Differences of number of cases', main = 'B')
dev.off()
png(filename = 'ACF&PACF.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p3 <- acf(df_timeseriesdiff1, lag.max=20, main = 'A')
acf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
p4 <- pacf(df_timeseriesdiff1, lag.max=20, main = 'B')
pacf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
dev.off()
auto.arima(df$`United States`)
df_timeseriesarima <- arima(df_timeseries, order=c(0,1,1))
print(df_timeseriesarima)
df_timeseriesforecasts <- forecast(df_timeseriesarima, h=15)
print(df_timeseriesforecasts)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA")
library(TTR)
library(forecast)
library(readr)
library(ggplot2)
library(tibble)
library(tseries)
df <- read_csv("Daily_Country_Wise_Confirmed_Cases.csv")
# Remember the names
Countries <- df$Country
# Transpose all but the first column (Country)
df <- as.data.frame(t(df[ , -1]))
colnames(df) <- Countries
df <- tibble::rownames_to_column(df, "Date")
# Mexico: Monkeypox Cases
df_timeseries <- ts(df$Mexico, frequency = 7)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA/MEX")
png(filename = 'Decompose.png', width = 18, height = 20, units = 'cm', res=600)
df_timeseries_components <- decompose(df_timeseries)
par(mfrow = c(4,1), mar = c(4, 4, 1, 1))
plot(df_timeseries_components$x, ylab = 'Data',
xlab = '')
plot(df_timeseries_components$trend, ylab = 'Trend',
xlab = '')
plot(df_timeseries_components$seasonal, ylab = 'Seasonal',
xlab = '')
plot(df_timeseries_components$random, xlab = 'Number of weeks',
ylab = 'Random')
dev.off()
p1 <- plot.ts(df_timeseries, xlab = 'Number of days', ylab = 'Number of Cases', main = 'A')
# ARIMA models are defined for stationary time series. Therefore, if you start off
# with a non-stationary time series, you will first need to ‘difference’ the time
# series until you obtain a stationary time series.
# If you have to difference the time series d times to obtain a stationary series,
# then you have an ARIMA(p,d,q) model, where d is the order of differencing used.
png(filename = 'Differences.png', width=35, height=15, units = 'cm', res = 600)
df_timeseriesdiff1 <- diff(df_timeseries, differences=1)
p2 <- plot.ts(df_timeseriesdiff1, xlab = 'Number of days', ylab = 'Differences between pairs of consecutive cases', main = 'B')
dev.off()
png(filename = 'ACF&PACF.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p3 <- acf(df_timeseriesdiff1, lag.max=20, main = 'A')
acf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
p4 <- pacf(df_timeseriesdiff1, lag.max=20, main = 'B')
pacf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
dev.off()
auto.arima(df$Mexico)
df_timeseriesarima <- arima(df_timeseries, order=c(4,1,3))
print(df_timeseriesarima)
df_timeseriesforecasts <- forecast(df_timeseriesarima, h=15)
print(df_timeseriesforecasts)
print('-----------------------------------------------------------------------')
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA")
library(TTR)
library(forecast)
library(readr)
library(ggplot2)
library(tibble)
library(hrbrthemes)
library(tseries)
df <- read_csv("Daily_Country_Wise_Confirmed_Cases.csv")
# Remember the names
Countries <- df$Country
# Transpose all but the first column (Country)
df <- as.data.frame(t(df[ , -1]))
colnames(df) <- Countries
df <- tibble::rownames_to_column(df, "Date")
# USA: Monkeypox Cases
df_timeseries <- ts(df$`United States`, frequency = 7)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA/USA")
png(filename = 'USA_Decompose.png', width = 18, height = 20, units = 'cm', res=600)
df_timeseries_components <- decompose(df_timeseries)
par(mfrow = c(4,1), mar = c(4, 4, 1, 1))
plot(df_timeseries_components$x, ylab = 'Data',
xlab = '')
plot(df_timeseries_components$trend, ylab = 'Trend',
xlab = '')
plot(df_timeseries_components$seasonal, ylab = 'Seasonal',
xlab = '')
plot(df_timeseries_components$random, xlab = 'Number of weeks',
ylab = 'Random')
dev.off()
png(filename = 'Cases&Differences.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p1 <- plot.ts(df_timeseries, xlab = 'Number of days', ylab = 'Number of Cases', main = 'A')
# ARIMA models are defined for stationary time series. Therefore, if you start off
# with a non-stationary time series, you will first need to ‘difference’ the time
# series until you obtain a stationary time series.
# If you have to difference the time series d times to obtain a stationary series,
# then you have an ARIMA(p,d,q) model, where d is the order of differencing used.
df_timeseriesdiff1 <- diff(df_timeseries, differences=1)
p2 <- plot.ts(df_timeseriesdiff1, xlab = 'Number of days', ylab = 'Differences of number of cases', main = 'B')
dev.off()
png(filename = 'ACF&PACF.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p3 <- acf(df_timeseriesdiff1, lag.max=20, main = 'A')
acf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
p4 <- pacf(df_timeseriesdiff1, lag.max=20, main = 'B')
pacf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
dev.off()
auto.arima(df$`United States`)
df_timeseriesarima <- arima(df_timeseries, order=c(0,1,1))
print(df_timeseriesarima)
df_timeseriesforecasts <- forecast(df_timeseriesarima, h=15)
print(df_timeseriesforecasts)
png(filename = 'Forecast&Residuals.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p5 <- plot(df_timeseriesforecasts, xlab = 'Number of days', ylab = 'Number of Cases', main ='A')
# acf(kingstimeseriesforecasts$residuals, lag.max=20)
Box.test(df_timeseriesforecasts$residuals, lag=20, type="Ljung-Box")
p7 <- plot.ts(df_timeseriesforecasts$residuals, xlab = 'Number of days', ylab = 'Forecast Residuals', main = 'B')
dev.off()
png(filename = 'ACFs.png', width=50, height=30, units = 'cm', res = 600)
p6 <- acf(df_timeseriesforecasts, lag.max = NULL, type = c("correlation", "covariance", "partial"), plot = TRUE, na.action = na.pass, demean = TRUE)
dev.off()
# Forecast function
plotErrors <- function(Errors) {
# make a histogram of the forecast Errors:
mybinsize <- IQR(Errors)/4
mysd <- sd(Errors)
mymin <- min(Errors) - mysd*5
mymax <- max(Errors) + mysd*3
# generate normally distributed data with mean 0 and standard deviation
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast Errors, with the normally distributed ˓→data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(Errors, col="red", freq=FALSE, breaks=mybins, main = '')
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast Errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
png(filename = 'HistErrors.png', width=30, height=15, units = 'cm', res = 600)
p8 <- plotErrors(df_timeseriesforecasts$residuals)
dev.off()
# Since successive forecast Errors do not seem to be correlated, and the forecast
# Errors seem to be normally distributed with mean zero and constant variance,
# the ARIMA(0,1,1) does seem to provide an adequate predictive model
print('-----------------------------------------------------------------------')
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA")
library(TTR)
library(forecast)
library(readr)
library(ggplot2)
library(tibble)
library(hrbrthemes)
library(tseries)
df <- read_csv("Daily_Country_Wise_Confirmed_Cases.csv")
# Remember the names
Countries <- df$Country
# Transpose all but the first column (Country)
df <- as.data.frame(t(df[ , -1]))
colnames(df) <- Countries
df <- tibble::rownames_to_column(df, "Date")
# Adds up a World Count in the dataframe
Sum <- rowSums(df[ , -1])
Sum <- matrix(Sum)
df[ ,114] <- Sum
Countries[113] <- 'World'
Countries2 <- 'Date'
Countries2 <- append(Countries2, Countries)
colnames(df) <- Countries2
# World: Monkeypox Cases
df_timeseries <- ts(df$World, frequency=7)
setwd("C:/Users/xedua/OneDrive/Escritorio/MCC-I/Applied Mathematics/FPA/World")
png(filename = 'world_Decompose.png', width = 18, height = 20, units = 'cm', res=600)
df_timeseries_components <- decompose(df_timeseries)
par(mfrow = c(4,1), mar = c(4, 4, 1, 1))
plot(df_timeseries_components$x, ylab = 'Data',
xlab = '')
plot(df_timeseries_components$trend, ylab = 'Trend',
xlab = '')
plot(df_timeseries_components$seasonal, ylab = 'Seasonal',
xlab = '')
plot(df_timeseries_components$random, xlab = 'Number of weeks',
ylab = 'Random')
dev.off()
png(filename = 'Cases&Differences.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p1 <- plot.ts(df_timeseries, xlab = 'Number of days', ylab = 'Number of Cases', main = 'A')
# ARIMA models are defined for stationary time series. Therefore, if you start off
# with a non-stationary time series, you will first need to ‘difference’ the time
# series until you obtain a stationary time series.
# If you have to difference the time series d times to obtain a stationary series,
# then you have an ARIMA(p,d,q) model, where d is the order of differencing used.
df_timeseriesdiff1 <- diff(df_timeseries, differences=1)
p2 <- plot.ts(df_timeseriesdiff1, xlab = 'Number of days', ylab = 'Differences of number of cases', main = 'B')
dev.off()
png(filename = 'ACF&PACF.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p3 <- acf(df_timeseriesdiff1, lag.max=20, main = 'A')
acf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
p4 <- pacf(df_timeseriesdiff1, lag.max=20, main = 'B')
pacf(df_timeseriesdiff1, lag.max=20, plot=FALSE)
dev.off()
auto.arima(df$`World`)
df_timeseriesarima <- arima(df_timeseries, order=c(2,1,1))
print(df_timeseriesarima)
df_timeseriesforecasts <- forecast(df_timeseriesarima, h=15)
print(df_timeseriesforecasts)
png(filename = 'Forecast&Residuals.png', width=35, height=15, units = 'cm', res = 600)
par(mfrow = c(1,2))
p5 <- plot(df_timeseriesforecasts, xlab = 'Number of days', ylab = 'Number of Cases', main ='A')
# acf(kingstimeseriesforecasts$residuals, lag.max=20)
Box.test(df_timeseriesforecasts$residuals, lag=20, type="Ljung-Box")
p7 <- plot.ts(df_timeseriesforecasts$residuals, xlab = 'Number of days', ylab = 'Forecast Residuals', main = 'B')
dev.off()
png(filename = 'ACFs.png', width=50, height=30, units = 'cm', res = 600)
p6 <- acf(df_timeseriesforecasts, lag.max = NULL, type = c("correlation", "covariance", "partial"), plot = TRUE, na.action = na.pass, demean = TRUE)
dev.off()
# Forecast function
plotErrors <- function(Errors) {
# make a histogram of the forecast Errors:
mybinsize <- IQR(Errors)/4
mysd <- sd(Errors)
mymin <- min(Errors) - mysd*5
mymax <- max(Errors) + mysd*3
# generate normally distributed data with mean 0 and standard deviation
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast Errors, with the normally distributed ˓→data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(Errors, col="red", freq=FALSE, breaks=mybins, main = '')
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast Errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
png(filename = 'HistErrors.png', width=30, height=15, units = 'cm', res = 600)
p8 <- plotErrors(df_timeseriesforecasts$residuals)
dev.off()
# Since successive forecast Errors do not seem to be correlated, and the forecast
# Errors seem to be normally distributed with mean zero and constant variance,
# the ARIMA(2,1,1) does seem to provide an adequate predictive model
